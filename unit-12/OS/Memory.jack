// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    /** Initializes the class. */
    static Array ram, heap; 
    static int heapLength, base, freeList; 
    

    
    function void init() {
        let ram = 0;  
        let heap = 2048; 
        let freeList = 2048; 
        let heap[1] = 14335;
        let heap[0] = 0;
        return ; 
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value; 
        return; 
    }
    
   
   
    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        var Array cur, prev; 
        var int break, block, sizePlus; 
        let block = 0; 
        let prev = freeList; 
        let cur = freeList; 
        let sizePlus = size+2; 
        let break = 0; 
        while ((break=0)&(block=0)){
           if (cur[0]=0){
               let break = 1 ;
           }
           if ( (cur[1]>sizePlus) | (cur[1]=sizePlus)){
              
              if (cur[1]<(sizePlus+1)){
                 let prev[0]= cur[0];
                 let ram[cur+1] = size + 1;
                 let block = cur;  
                  
              }
              else {
                 let block = cur + cur[1] - size; 
                 let ram[block -1 ] = size; 
                 let cur[1] = cur[1] - sizePlus;
              }
           }
           else{
              let prev = cur; 
              let cur = cur[0]; 
           }
           
        }
        return block;
 
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let ram[o-2] = freeList; 
        let freeList = o-2;
        return;
    }    

    /** Returns the maximal element contained in the given Array/object. 
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        var int size, mx, i; 
        let size = o-1;
        let i = 1; 
        let mx = o; 
        while (i<size) {
            if (o[i]> mx){
               let mx = o[i];
            }
            let i = i+1;
        }
        return mx; 
    }
}
